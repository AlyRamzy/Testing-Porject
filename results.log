[doctest] doctest version is "2.4.3"
[doctest] run with "--dt-help" for options
===============================================================================
TestScripts/BFS_Test.cpp:51:
TEST SUITE: Correctness
TEST CASE:  TEST CASE 2 :construct graph with -ve number of nodes

TestScripts/BFS_Test.cpp:52: ERROR: CHECK_NOTHROW( Graph g(-1) ) THREW exception: "std::bad_alloc"

===============================================================================
TestScripts/BFS_Test.cpp:122:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(V+E) where V is number of vertices in the graph and E is number of edges in the graph.

TestScripts/BFS_Test.cpp:133: MESSAGE: BFS Performance Test Passed

===============================================================================
TestScripts/BSTtraversal_Test.cpp:57:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n log n) where n is the size of the tree nodes.

TestScripts/BSTtraversal_Test.cpp:68: MESSAGE: BST Traversal performance test passed

===============================================================================
TestScripts/BinarySearch_Test.cpp:96:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(logn) where n is the size of the sorted array.

TestScripts/BinarySearch_Test.cpp:105: MESSAGE: Binary Search performance test passed

===============================================================================
TestScripts/ConvexHull_Test.cpp:144:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n^2) where n is the number of points.

TestScripts/ConvexHull_Test.cpp:151: MESSAGE: ConvexHull performance test passed

===============================================================================
TestScripts/Dijkstra_Test.cpp:124:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(ElogV) where n is the size of the sorted array.

TestScripts/Dijkstra_Test.cpp:136: MESSAGE: Dijkstra performance test passed

===============================================================================
TestScripts/EulerTour_Test.cpp:41:
TEST SUITE: Correctness
TEST CASE:  TEST CASE 2 :construct tree with -ve number of nodes

TestScripts/EulerTour_Test.cpp:42: ERROR: CHECK_NOTHROW( Tree t(-1) ) THREW exception: "std::bad_alloc"

===============================================================================
TestScripts/EulerTour_Test.cpp:129:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(N) where N is number of vertices in the tree.

TestScripts/EulerTour_Test.cpp:144: MESSAGE: Euler Tour Performance Test Passed

Test case exceeded time limit of 0.500000!
===============================================================================
TestScripts/InsertionSort_Test.cpp:93:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n) where n is the size of the sorted array.

TestScripts/InsertionSort_Test.cpp:103: MESSAGE: Insertion sort O(n) performance test passed

===============================================================================
TestScripts/InsertionSort_Test.cpp:106:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n^2) where n is the size of the reversed sorted array.

TestScripts/InsertionSort_Test.cpp:116: MESSAGE: Insertion sort O(n^2) performance test passed

===============================================================================
TestScripts/InsertionSort_Test.cpp:119:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n^2) where n is the size of the unsorted array.

TestScripts/InsertionSort_Test.cpp:129: MESSAGE: Insertion sort O(n^2) performance test passed

===============================================================================
TestScripts/KMP_Test.cpp:94:
TEST SUITE: Performance
TEST CASE:  Test O(n + m) KMP implementation

TestScripts/KMP_Test.cpp:112: MESSAGE: KMP Performance Test Passed

===============================================================================
TestScripts/Kruskal_Test.cpp:24:
TEST SUITE: Correctness
TEST CASE:  Negative Size of Graph

TestScripts/Kruskal_Test.cpp:26: ERROR: CHECK_NOTHROW( Kruskal(-5,vector<edge>()) ) THREW exception: "vector::_M_default_append"

===============================================================================
TestScripts/Kruskal_Test.cpp:86:
TEST SUITE: Performance
TEST CASE:  Performance Test

TestScripts/Kruskal_Test.cpp:95: MESSAGE: Kruskal Performance Test Passed

===============================================================================
TestScripts/LCA_Test.cpp:67:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(h)  where h is the height of the tree

TestScripts/LCA_Test.cpp:77: MESSAGE: LCA Performance Test Passed

===============================================================================
TestScripts/LCS_Test.cpp:90:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(nm) where n and m is the size of the two similar arrays.

TestScripts/LCS_Test.cpp:105: MESSAGE: LCS Performance Test Passed

===============================================================================
TestScripts/LCS_Test.cpp:108:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(nm) where n and m is the size of the tow unsimilar arrays.

TestScripts/LCS_Test.cpp:124: MESSAGE: LCS Performance Test Passed

===============================================================================
TestScripts/LIS_Test.cpp:86:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(e^n) where n is the size of the sorted array.

TestScripts/LIS_Test.cpp:96: MESSAGE: LIS Performance Test Passed

===============================================================================
TestScripts/LIS_Test.cpp:99:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n^2) where n is the size of the reversed sorted array.

TestScripts/LIS_Test.cpp:109: MESSAGE: LIS Performance Test Passed

===============================================================================
TestScripts/LIS_Test.cpp:112:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n^2) where n is the size of the unsorted array.

TestScripts/LIS_Test.cpp:122: MESSAGE: LIS Performance Test Passed

===============================================================================
TestScripts/LongestPalindromicSubstring_Test.cpp:56:
TEST SUITE: Performance
TEST CASE:  Test O(n^2) implementation

TestScripts/LongestPalindromicSubstring_Test.cpp:64: MESSAGE: LPS Performance Test Passed

===============================================================================
TestScripts/MergeSort_Test.cpp:152:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(nlogn) where n is the size of the sorted array.

TestScripts/MergeSort_Test.cpp:162: MESSAGE: Merge Sort Performance Test Passed

===============================================================================
TestScripts/MinMax_Test.cpp:57:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(b^m)  where b is the branching factor and m is the tree depth.

TestScripts/MinMax_Test.cpp:66: MESSAGE: MinMax Performance Test Passed

===============================================================================
TestScripts/PriorityQueue_Test.cpp:104:
TEST SUITE: Performance
TEST CASE:  Time Complexity for insert: O(n^2) where n is the number of elements to push in the priority queue.

TestScripts/PriorityQueue_Test.cpp:111: MESSAGE: Priority Queue performance test passed

===============================================================================
TestScripts/Queue_Test.cpp:104:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n) where n is the number of elements to push in the queue.

TestScripts/Queue_Test.cpp:111: MESSAGE: Queue performance test passed

===============================================================================
TestScripts/QuickSort_Test.cpp:141:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n^2) where n is the size of the sorted array.

TestScripts/QuickSort_Test.cpp:150: MESSAGE: Quick sort performance test passed

===============================================================================
TestScripts/SegTree_Test.cpp:99:
TEST SUITE: Performance
TEST CASE:  Test O(n) Segment Tree Build implementation

TestScripts/SegTree_Test.cpp:107: MESSAGE: Build Performance Test Passed

===============================================================================
TestScripts/SegTree_Test.cpp:110:
TEST SUITE: Performance
TEST CASE:  Test O(Log(n)) Segment Tree Update implementation

TestScripts/SegTree_Test.cpp:125: MESSAGE: Update Performance Test Passed

===============================================================================
TestScripts/SegTree_Test.cpp:128:
TEST SUITE: Performance
TEST CASE:  Test O(Log(n)) Segment Tree Query implementation

TestScripts/SegTree_Test.cpp:143: MESSAGE: Query Performance Test Passed

===============================================================================
TestScripts/Stack_Test.cpp:88:
TEST SUITE: Performance
TEST CASE:  Time Complexity: O(n) where n is the number of elements to push in the stack.

TestScripts/Stack_Test.cpp:95: MESSAGE: Stack performance test passed

===============================================================================
[doctest] test cases:     159 |     155 passed | 4 failed | 0 skipped
[doctest] assertions: 1000464 | 1000461 passed | 3 failed |
[doctest] Status: FAILURE!
